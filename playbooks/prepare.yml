---
- name: Install monitoring services
  hosts: instances
  become: yes
  tasks:
    # (continuos) vmstat --unit M --one-header --timestamp 5
    - name: Install vmstat service
      copy:
        src: vmstat.service
        dest: /etc/systemd/system/
    # iostat -c 5
    - name: Install iostat-cpu service
      copy:
        src: iostat-cpu.service
        dest: /etc/systemd/system/
    # iostat -mdN sda 5
    - name: Install iostat-disk service
      copy:
        src: iostat-disk.service
        dest: /etc/systemd/system/
    # mpstat -P ALL 5
    - name: Install mpstat service
      copy:
        src: mpstat.service
        dest: /etc/systemd/system/
    # (systemd timer) docker stats --no-stream
    - name: Install docker-stats service
      copy:
        src: docker-stats.service
        dest: /etc/systemd/system/
    - name: Install docker-stats timer
      copy:
        src: docker-stats.timer
        dest: /etc/systemd/system/
    - name: Elastic - sysctl -w vm.max_map_count=262144
      sysctl:
        name: vm.max_map_count
        value: 262144
    # (maybe?) netstat --continuous --tcp --udp

- name: Setup and run Mastodon on the instances
  hosts: instances
  tasks:
    - name: .env.production
      template:
        src: .env.production.jinja2
        dest: .env.production
    - name: Create cert directory
      shell: "mkdir -p cert/{{ inventory_hostname }}/"
      args:
        creates: cert/{{ inventory_hostname }}/
    - name: Install minica certificate
      copy:
        src: cert/{{ inventory_hostname }}/cert.pem
        local_follow: true
        dest: cert/{{ inventory_hostname }}/cert.pem
    - name: Install minica private key
      copy:
        src: cert/{{ inventory_hostname }}/key.pem
        local_follow: true
        dest: cert/{{ inventory_hostname }}/key.pem
    - name: Configure git name to be able to apply patches
      community.general.git_config:
        scope: global
        name: user.name
        value: ansible
    - name: Configure git email to be able to apply patches
      community.general.git_config:
        scope: global
        name: user.email
        value: ansible@client
    - name: Checkout git repo
      git:
        repo: https://github.com/mastodon/mastodon.git
        dest: mastodon
        version: "{{ mastodon_version }}"
        depth: 1
    - name: Sync patches
      synchronize:
        mode: push
        src: patches
        dest: .
    - name: Apply patches
      command:
        chdir: mastodon
        cmd: git am ../patches/
    - name: Install dockerignore
      copy:
        src: .dockerignore
        local_follow: true
        dest: .
    - name: Build Mastodon image from patched git version {{ mastodon_version }}
      command: docker compose --project-name mastodon build
      environment:
        MASTODON_VERSION: "{{ mastodon_version }}"
    - name: Pull images
      command: docker compose --project-name mastodon pull --quiet
      environment:
        MASTODON_VERSION: "{{ mastodon_version }}"
    - name: Pre-compile Mastodon assets
      command:
        cmd: docker compose --project-name mastodon run --rm precompile-assets
      environment:
        hostname: "{{ inventory_hostname }}"
        MASTODON_VERSION: "{{ mastodon_version }}"
    - name: Migrate Mastodon database
      command:
        cmd: docker compose --project-name mastodon run --rm db-migrate
      environment:
        hostname: "{{ inventory_hostname }}"
        MASTODON_VERSION: "{{ mastodon_version }}"
      args:
        creates: mastodon/postgres14
    - name: Create elasticsearch indeces
      ignore_errors: true
      command:
        cmd: docker compose --project-name mastodon run --rm tootctl search deploy
      environment:
        hostname: "{{ inventory_hostname }}"
        MASTODON_VERSION: "{{ mastodon_version }}"
    - name: Add util scripts
      copy:
        src: scripts/
        dest: .
        local_follow: true
        mode: preserve
    - name: Create Mastodon admin user
      command:
        cmd: sh createAdminUser.sh
      args:
        creates: admin.txt
    - name: Create Mastodon users
      command:
        cmd: sh createUser.sh {{ hostvars[inventory_hostname].users }} user {{ inventory_hostname }}
      environment:
        MASTODON_VERSION: "{{ mastodon_version }}"
      args:
        creates: users.txt
    - name: Let local users follow each other
      command:
        cmd: sh followersAddLocal.sh users.txt
      environment:
        MASTODON_VERSION: "{{ mastodon_version }}"
    - name: Collect user credentials
      fetch:
        src: users.txt
        dest: users/
    - name: Distribute user credentials
      copy:
        src: users
        dest: ./
    - name: Let remote users follow each other
      ignore_errors: true # todo remove - use for now since this fails..
      command:
        cmd: sh followersAdd.sh
      environment:
        MASTODON_VERSION: "{{ mastodon_version }}"

- name: Setup clients
  hosts: clients
  tasks:
    - name: Distribute app dependencies
      copy:
        src: lib
        dest: app/
        local_follow: true
    - name: Distribute app
      copy:
        src: client.jar
        dest: app/client.jar
        local_follow: true
    - name: Distribute user credentials
      copy:
        src: users
        dest: ./
      # todo: if multiple clients, then split files by number of clients

- name: Setup tootbench
  hosts: clients
  become: yes
  tasks:
    - name: Install app service
      copy:
        src: tootbench.service
        dest: /etc/systemd/system/
