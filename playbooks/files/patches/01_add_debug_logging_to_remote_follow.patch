Subject: [PATCH] [PATCH] add debug logging to remote_follow
---
Index: app/helpers/webfinger_helper.rb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/helpers/webfinger_helper.rb b/app/helpers/webfinger_helper.rb
--- a/app/helpers/webfinger_helper.rb	(revision 543c33ab2f232afefb10e41f3cc96770594e840c)
+++ b/app/helpers/webfinger_helper.rb	(revision 807df3582bfb529d8dab89e6d3cbce3cdab875cd)
@@ -2,6 +2,7 @@
 
 module WebfingerHelper
   def webfinger!(uri)
+    Rails.logger.debug "Webfingering #{uri}"
     Webfinger.new(uri).perform
   end
 end
Index: app/lib/request.rb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/lib/request.rb b/app/lib/request.rb
--- a/app/lib/request.rb	(revision 543c33ab2f232afefb10e41f3cc96770594e840c)
+++ b/app/lib/request.rb	(revision 807df3582bfb529d8dab89e6d3cbce3cdab875cd)
@@ -59,6 +59,7 @@
     begin
       response = http_client.public_send(@verb, @url.to_s, @options.merge(headers: headers))
     rescue => e
+      Rails.logger.debug "Request error #{e.message}"
       raise e.class, "#{e.message} on #{@url}", e.backtrace[0]
     end
 
@@ -196,7 +197,9 @@
 
         addresses.each do |address|
           begin
+            Rails.logger.debug "Checking private address? #{address}"
             check_private_address(address)
+            Rails.logger.debug "private address checked"
 
             sock     = ::Socket.new(address.is_a?(Resolv::IPv6) ? ::Socket::AF_INET6 : ::Socket::AF_INET, ::Socket::SOCK_STREAM, 0)
             sockaddr = ::Socket.pack_sockaddr_in(port, address.to_s)
@@ -213,6 +216,7 @@
             socks << sock
             addr_by_socket[sock] = sockaddr
           rescue => e
+            Rails.logger.debug "socket error #{e.message}"
             outer_e = e
           end
         end
@@ -246,6 +250,7 @@
         if outer_e
           raise outer_e
         else
+          Rails.logger.error "No address for #{host}"
           raise SocketError, "No address for #{host}"
         end
       end
Index: app/lib/webfinger.rb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/lib/webfinger.rb b/app/lib/webfinger.rb
--- a/app/lib/webfinger.rb	(revision 543c33ab2f232afefb10e41f3cc96770594e840c)
+++ b/app/lib/webfinger.rb	(revision 807df3582bfb529d8dab89e6d3cbce3cdab875cd)
@@ -56,13 +56,16 @@
     webfinger_request(url).perform do |res|
       if res.code == 200
         body = res.body_with_limit
+        Rails.logger.debug "Webfinger body.empty? #{body.empty?}"
         raise Webfinger::Error, "Request for #{@uri} returned empty response" if body.empty?
         body
       elsif res.code == 404 && use_fallback
+        Rails.logger.debug "Webfinger 404 && use_fallback"
         body_from_host_meta
       elsif res.code == 410
         raise Webfinger::GoneError, "#{@uri} is gone from the server"
       else
+        Rails.logger.debug "Webfinger error #{res.code}"
         raise Webfinger::Error, "Request for #{@uri} returned HTTP #{res.code}"
       end
     end
Index: app/models/remote_follow.rb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/models/remote_follow.rb b/app/models/remote_follow.rb
--- a/app/models/remote_follow.rb	(revision 543c33ab2f232afefb10e41f3cc96770594e840c)
+++ b/app/models/remote_follow.rb	(revision 807df3582bfb529d8dab89e6d3cbce3cdab875cd)
@@ -36,6 +36,8 @@
 
     username, domain = value.strip.gsub(/\A@/, '').split('@')
 
+    Rails.logger.debug "Value #{value} split to user #{username}@#{domain}"
+
     domain = begin
       if TagManager.instance.local_domain?(domain)
         nil
@@ -44,16 +46,23 @@
       end
     end
 
+    Rails.logger.debug "Value #{value} normalized to user #{username}@#{domain}"
+
     [username, domain].compact.join('@')
   rescue Addressable::URI::InvalidURIError
     value
   end
 
   def fetch_template!
+    Rails.logger.debug "Fetch template - acc.blank? #{acct.blank?} - #{acct}"
     return missing_resource_error if acct.blank?
 
+    Rails.logger.debug "Fetch template - splitting acct into _, domain ..."
     _, domain = acct.split('@')
 
+    Rails.logger.debug "Fetch template - authorize_interaction_url: #{authorize_interaction_url}"
+    Rails.logger.debug "Fetch template - redirect_uri_template.nil? #{redirect_uri_template.nil?}"
+
     if domain.nil?
       @addressable_template = Addressable::Template.new("#{authorize_interaction_url}?uri={uri}")
     elsif redirect_uri_template.nil?
