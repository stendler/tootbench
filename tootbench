#!/usr/bin/env bash

if [ "init" == "$1" ]; then
  shift
  ./scripts/init.sh $@
  exit "$?"
fi

timestamp=$(date -u +%Y-%m-%dT%H:%M:%S) # set a timestamp to be used for all runs
reps=5 # number of repetitions for all scenarios
runtime=600 # total runtime for each scenario in seconds

OPTS=$(getopt --options hn:t:c: --longoptions help,repeat:,runtime:,comment: -- "$@")
eval set -- "$OPTS"
while true; do
  case "$1" in
      -h|--help)
      echo "Usage: $0 [--repeat <number>] [--runtime <seconds>] <scenarios...>"
      echo "   or: $0 init"
      echo
      echo "Description:"
      echo "Run a full Mastodon federation benchmark for each of the given scenarios."
      echo
      echo "Available scenarios:"
      ./scripts/scenarios.sh
      echo
      echo "Requirements:"
      printf "\tDocker:     " && (docker version >/dev/null 2>/dev/null && printf "✅ " || printf "❌ " && echo " (mandatory)")
      printf "\tOpenSSL:    " && (openssl version >/dev/null 2>/dev/null && echo "✅ " || echo "❌  (maybe use the docker image in ./gcloud-terraform/ instead - see below)")
      printf "\tTerraform:  " && (terraform -version >/dev/null 2>/dev/null && echo "✅ " || echo "❌  (maybe use the docker image in ./gcloud-terraform/ instead - see below)")
      printf "\tMaven:      " && (mvn --version >/dev/null 2>/dev/null && echo "✅ " || echo "⚠  (may use a docker container instead)")
      printf "\tAnsible:    " && (ansible-playbook --version >/dev/null 2>/dev/null && echo "✅ " || echo "❌  (maybe use the docker image in ./gcloud-terraform/ instead - see below)")
      printf "\tgcloud SDK: " && (gcloud --version >/dev/null 2>/dev/null && echo "✅ " || echo "❌  (maybe use the docker image in ./gcloud-terraform/ instead - see below)")
      printf "\t------------\n"
      printf "\tFor analysis:\n"
      printf "\tPython      " && (python --version >/dev/null 2>/dev/null && echo "✅ " || echo "❌ ")
      printf "\tPoetry      " && (poetry --version >/dev/null 2>/dev/null && echo "✅ " || echo "❌ ")
      echo
      printf "Alternatively, use the docker image in ./gcloud-terraform/ instead:\n\tdocker build -t gcloud-terraform:412 gcloud-terraform\n"
      printf '\tdocker run --entrypoint /bin/bash -a \\\n\t   -v "$(PWD):/home/cloudsdk/project" \\\n\t   -v gcloud-config-personal:/home/cloudsdk/.config -v gcloud-config-root:/root/.config \\\n\t   -v /var/run/docker.sock:/var/run/docker.sock --name gcloud-terraform -u 1000:972 -w /home/cloudsdk/project \\\n\t   --env HOST_VOLUME_MOUNT=$(PWD) \\\n\t   gcloud-terraform:412\n'
      echo
      exit 0 ;;
      -n|--repeat) reps="$2"; shift 2 ;;
      -t|--runtime) runtime="$2"; shift 2 ;;
      -c|--comment) timestamp+="_${2}"; shift 2; ;;
      --) shift; break ;;
  esac
done

if [ -z "$*" ]; then
  echo 1>&2 "No scenario given. Use one or more of the following available scenarios:"
  echo 1>&2
  ./scripts/scenarios.sh 1>&2
  exit 1
fi

cat banner.txt

echo "Timestamp/Name: $timestamp"
echo "Repeats: $reps"
echo "Runtime: $runtime"
echo "Scenarios: $*"
echo
read -n 1 -p "Run tootbench with this configuration? [Y/n] " execute
case "$execute" in
  n|N)
    echo 1>&2
    echo 1>&2 "Cancelled by user."
    exit 2
  ;;
  *) echo 1>&2 && echo 1>&2 "Proceeding..." ;;
esac

function run() {
  if scenario_cmd="-var-file=scenarios/$s.tfvars" \
    && terraform -chdir=terraform apply "${scenario_cmd}" -auto-approve \
    && ./scripts/await-ssh.sh \
    && make scenario="$s" CURRENT_REP="$current_rep" timestamp="$timestamp" runtime="$runtime" prepare start wait stop \
    ; then
      return 0
  else
    echo 1>&2 "failed, wait a bit and then try cleaning up"
    sleep 10
    # stop & cleanup
    make stop clean
    return 1
  fi
}

function repeat_until_succeed() {
  if [ -z "$1" ]; then
    return 1
  fi
  for i in $(seq 5); do
    if $1; then
      return 0
    fi
    # try failed; retrying
    echo 1>&2 "retrying after 10s"
    curl -H "Tags: rotating_light" -H "Title: Tootbench retrying $i/5" -d "$s - $current_rep failed. Retrying.. $i/5" "https://ntfy.sh/cloud-service-benchmarking-22"
    sleep 10
  done
  failure
}

function failure() {
  terraform -chdir=terraform destroy -auto-approve
  echo 1>&2 "Tootbench run failure in scenario $s run $current_rep/$reps with name $timestamp"
  curl -H "Tags: x" -H "Title: Tootbench failed" -d "$timestamp failed for $s run $current_rep/$reps" "https://ntfy.sh/cloud-service-benchmarking-22"
  exit 1
}


# todo: persists tootbench config in output folder & each scenario config

for s in "$@"; do
  for available_s in $(./scripts/scenarios.sh); do
    if [ "$s" == "$available_s" ]; then
      for current_rep in $(seq "$reps"); do
        # do run the benchmark, wait, stop collect
        repeat_until_succeed run
        repeat_until_succeed 'make scenario="$s" CURRENT_REP="$current_rep" timestamp="$timestamp" runtime="$runtime" collect'
        repeat_until_succeed 'make scenario="$s" CURRENT_REP="$current_rep" timestamp="$timestamp" runtime="$runtime" clean'
      done
      # break out of inner loop
      break
    fi
  done
done

terraform -chdir=terraform destroy -auto-approve

curl -H "Tags: white_check_mark" -H "Title: Tootbench" -d "$timestamp done." "https://ntfy.sh/cloud-service-benchmarking-22"

./analysis/preprocess.sh "playbooks/logs/$timestamp"
# todo run make analysis?
